{"version":3,"sources":["utils/commas.js","components/Card/Card.js","api/api.js","components/GlobalStats/GlobalStats.js","utils/i18n.js","locales/locales.js","components/Header/Header.js","components/DataTable/DataTable.js","components/BarGraph/BarGraph.js","components/ContinentsStats/PieChart/PieChart.js","components/ContinentsStats/ContinentsStats.js","components/Maps/USAMap.js","components/Maps/Maps.js","components/LineGraph/LineGraph.js","components/ScatterGraph/ScatterGraph.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["numberWithCommas","x","toString","replace","Card","props","className","Number","value","title","BASE_URL","GLOBAL_URL","COUNTRY_URL","HISTORY_URL","GLOBAL_HISTORY_URL","STATE_URL","DAILY_URL","GlobalStats","useState","globalStats","setGlobalStats","t","useTranslation","useEffect","a","fetch","result","json","updated","console","log","fetchGlobalSummary","cases","deaths","recovered","resources","en","translation","vn","i18n","use","detector","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","locales","name","Header","mode","localStorage","getItem","style","backgroundColor","color","language","setLanguage","changeLanguage","id","onChange","e","target","setItem","handleLanguageChanged","Object","keys","map","key","onClick","changed","DataTable","countriesData","setCountriesData","copyCountriesData","setCopyCountriesData","numberOfViewRows","setNumberOfViewRows","currentPage","setCurrentPage","fetchCountriesData","onSortUp","sort","b","onSortDown","prev","totalPages","Math","ceil","length","next","handleSelect","selected","type","placeholder","filter","country","toLowerCase","startsWith","onSearch","scope","currentCountries","slice","startIndex","index","src","alt","width","height","displayData","aria-label","prevPage","pageNumbers","i","push","indexOfFirstPage","indexOfLastPage","max","splice","num","displayPagination","BarGraph","history","setHistory","currentCountry","setCurrentCountry","currentProvince","setCurrentProvince","data","fetchHistory","convertData","obj","list","forEach","y","countryData","find","labels","datasets","label","options","tooltips","callbacks","tooltipItem","datasetIndex","yLabel","responsive","maintainAspectRatio","split","province","PieChart","legend","scale","gridLines","angleLines","colors","ContinentsStats","gridColor","fontColor","continents","setContinents","fetchContinents","getData","continent","continentLabels","USAMap","setData","content","setContent","state","item","fetchStates","colorScale","scaleLinear","domain","min","range","data-tip","projection","geography","geographies","geo","cur","s","rsmKey","fill","stroke","onMouseEnter","handleHover","properties","onMouseLeave","handleMouseLeave","default","outline","hover","pressed","Maps","ts","Date","for","active","todayCases","todayDeaths","toLocaleString","LineGraph","globalHistory","setGlobalHistory","fetchGlobalHistory","elements","line","usePointStyle","ScatterGraph","dailyData","setDailyData","intitialDailyData","setInitialDailyData","fetchDailyData","day","getDate","join","getTime","extractData","scales","xAxes","ticks","callback","toLocaleDateString","month","year","display","handleChanged","defaultValue","Footer","href","App","changeMode","setState","prevState","document","querySelector","JSON","stringify","changeMapView","view","viewMap","changeUpdate","date","undefined","Fragment","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yVAAO,SAASA,EAAiBC,GAC7B,OAAKA,EACEA,EAAEC,WAAWC,QAAQ,wBAAyB,KADtC,ICCnB,IASeC,EATF,SAACC,GACV,OACI,yBAAKC,UAAU,QACX,4BAAKN,EAAiBO,OAAOF,EAAMG,SACnC,2BAAIH,EAAMI,S,SCNTC,EAAW,+BACXC,EAAaD,EAAW,OACxBE,EAAcF,EAAW,aACzBG,EAAcH,EAAW,2BACzBI,EAAqBJ,EAAW,+BAEhCK,EAAYL,EAAW,UACvBM,EAAY,uCC6BVC,EAhCK,SAAAZ,GAAU,IAAD,EACaa,mBAAS,IADtB,mBAClBC,EADkB,KACLC,EADK,KAEjBC,EAAMC,cAAND,EAeR,OAdAE,qBAAU,WAAI,4CACV,8BAAAC,EAAA,+EAE6BC,MAAMd,GAFnC,cAEce,EAFd,gBAGkCA,EAAOC,OAHzC,OAGcR,EAHd,OAIQC,EAAe,eAAID,IACnBd,EAAMuB,QAAQT,EAAW,SALjC,kDAQQU,QAAQC,IAAR,MARR,2DADU,uBAAC,WAAD,wBAYVC,KACD,IAEC,yBAAKzB,UAAU,iFACX,6BACI,kBAAC,EAAD,CAAMG,MAAOY,EAAE,aAAcb,MAAOW,EAAYa,SAEpD,6BACI,kBAAC,EAAD,CAAMvB,MAAOY,EAAE,UAAWb,MAAOW,EAAYc,UAEjD,6BACI,kBAAC,EAAD,CAAMxB,MAAOY,EAAE,aAAcb,MAAOW,EAAYe,e,wBCzB1DC,EAAY,CAChBC,GAAI,CACFC,Y,OAEFC,GAAK,CACHD,Y,QAGJE,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJR,YACAS,IAAK,KACLC,YAAa,KACbC,cAAc,EACdC,cAAe,CACbC,aAAa,KAGJT,QAAf,ECjBeU,EARC,CACZ,GAAO,CACHC,KAAO,WAEX,GAAO,CACHA,KAAO,yBCkCAC,G,OAnCA,SAAC9C,GACZ,IAAM+C,EAAO7C,OAAO8C,aAAaC,QAAQ,SACnCC,EAAQ,CACVC,gBAAkBJ,EAAM,UAAY,UACpCK,MAAQL,EAAM,OAAS,QAJL,EAMUlC,mBAASmC,aAAaC,QAAQ,aAAe,MANvD,mBAMfI,EANe,KAMLC,EANK,KAOtBpB,EAAKqB,eAAeF,GAWpB,OACI,4BAAQpD,UAAU,yBACd,yBAAKA,UAAU,WACX,uBAAGuD,GAAG,QAAN,uBAEJ,6BACI,4BAAQC,SAAU,SAACC,GAAD,OAXA,SAACA,GAC3BJ,EAAYI,EAAEC,OAAOxD,OACrB6C,aAAaY,QAAQ,WAAYF,EAAEC,OAAOxD,OAC1C+B,EAAKqB,eAAeG,EAAEC,OAAOxD,OAQE0D,CAAsBH,IAAIvD,MAAOkD,EAAUpD,UAAW,wBAA0B8C,EAAO,eAAiB,gBAfhIe,OAAOC,KAAKnB,GAASoB,KAAI,SAACC,GAC7B,OAAO,4BAAQA,IAAKA,EAAK9D,MAAO8D,GAAMrB,EAAQqB,GAAKpB,WAkBnD,6BACI,4BAAQ5C,UAAU,iCAAiCiD,MAAOA,EAAQgB,QAASlE,EAAMmE,SAAS,uBAAGlE,UAAW8C,EAAK,cAAc,sB,OCwJ5HqB,G,OApLG,WACd,IAAMrB,EAAO7C,OAAO8C,aAAaC,QAAQ,SACnCC,EAAQ,CACVC,gBAAkBJ,EAAM,OAAS,UACjCK,MAAQL,EAAM,OAAS,QAEnB/B,EAAMC,cAAND,EANY,EAOwBH,mBAAS,IAPjC,mBAOZwD,EAPY,KAOGC,EAPH,OAQgCzD,mBAAS,IARzC,mBAQZ0D,EARY,KAQOC,EARP,OAS8B3D,mBAAS,GATvC,mBASZ4D,EATY,KASMC,EATN,OAUoB7D,mBAAS,GAV7B,mBAUZ8D,EAVY,KAUCC,EAVD,KAWpB1D,qBAAU,WAAI,4CACV,8BAAAC,EAAA,+EAE6BC,MAAMb,GAFnC,cAEcc,EAFd,gBAGoCA,EAAOC,OAH3C,OAGc+C,EAHd,OAIQC,EAAiB,YAAID,IACrBG,EAAqB,YAAIH,IALjC,kDAQQ7C,QAAQC,IAAR,MARR,2DADU,uBAAC,WAAD,wBAYVoD,KACF,IAEF,IAyDMC,EAAW,SAACpB,EAAGO,GACjB,IAAIM,EAAiB,YAAOF,GAC5BE,EAAkBQ,MAAK,SAAC5D,EAAE6D,GAAH,OAAQ7D,EAAE8C,GAAOe,EAAEf,GAAO,GAAK,KACtDO,EAAqB,YAAID,KAEvBU,EAAa,SAACvB,EAAGO,GACnB,IAAIM,EAAiB,YAAOF,GAC5BE,EAAkBQ,MAAK,SAAC5D,EAAE6D,GAAH,OAAQ7D,EAAE8C,GAAOe,EAAEf,GAAO,GAAK,KACtDO,EAAqB,YAAID,KASvBW,EAAwB,IAAhBP,EACRQ,EAAaC,KAAKC,KAAKd,EAAkBe,OAASb,GAClDc,EAAQZ,IAAgBQ,EAC9B,OACI,yBAAKlF,UAAU,QACX,yBAAKA,UAAU,gEACX,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,QAAQe,EAAE,SAC1B,4BAAQf,UAAU,iCAAiCwD,SAAU,SAAAC,GAAC,OAtCzD,SAACA,GAClBgB,EAAoBxE,OAAOwD,EAAEC,OAAOxD,QACpCyE,EAAe,GAoC+DY,CAAa9B,IAAIR,MAAOA,GACtF,4BAAQ/C,MAAM,IAAIsF,UAAQ,GAA1B,KACA,4BAAQtF,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,QAEJ,0BAAMF,UAAU,QAAQe,EAAE,aAE9B,yBAAKf,UAAU,uCACX,2BAAOyF,KAAK,OAAOzF,UAAU,eAAe0F,YAAa3E,EAAE,iBAAkByC,SAAU,SAAAC,GAAC,OA3CvF,SAACA,GACd,IAAMa,EAAoBF,EAAcuB,QAAO,SAAAC,GAC3C,OAAOA,EAAO,QAAYC,cAAcC,WAAWrC,EAAEC,OAAOxD,MAAM2F,kBAEtEtB,EAAqB,YAAID,IACzBK,EAAe,GAsCyFoB,CAAStC,IAAIR,MAAOA,IAChH,yBAAKjD,UAAU,sBACX,0BAAMA,UAAU,oBAAmB,uBAAGA,UAAU,eAAewD,UAAQ,QAInF,2BAAOxD,UAAY,2BAA6B8C,EAAO,SAAW,IAAKG,MAAOA,GAC1E,+BACI,4BACA,wBAAI+C,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAOjF,EAAE,WACf,0BAAMf,UAAU,uBAAuBiE,QAAS,SAAAR,GAAC,OAAIoB,EAASpB,EAAG,cACjE,0BAAMzD,UAAU,mBAAmBiE,QAAS,SAAAR,GAAC,OAAIuB,EAAWvB,EAAG,eAEnE,wBAAIuC,MAAM,OAAOjF,EAAE,aACf,0BAAMf,UAAU,sBAAsBiE,QAAS,SAAAR,GAAC,OAAIoB,EAASpB,EAAG,YAChE,0BAAMzD,UAAU,mBAAmBiE,QAAS,SAAAR,GAAC,OAAIuB,EAAWvB,EAAG,aAEnE,wBAAIuC,MAAM,OAAOjF,EAAE,UACf,0BAAMf,UAAU,sBAAsBiE,QAAS,SAAAR,GAAC,OAAIoB,EAASpB,EAAG,aAChE,0BAAMzD,UAAU,mBAAmBiE,QAAS,SAAAR,GAAC,OAAIuB,EAAWvB,EAAG,cAEnE,wBAAIuC,MAAM,OAAOjF,EAAE,aACf,0BAAMf,UAAU,sBAAsBiE,QAAS,SAAAR,GAAC,OAAIoB,EAASpB,EAAG,gBAChE,0BAAMzD,UAAU,mBAAmBiE,QAAS,SAAAR,GAAC,OAAIuB,EAAWvB,EAAG,iBAEnE,wBAAIuC,MAAM,OAAOjF,EAAE,cACf,0BAAMf,UAAU,sBAAsBiE,QAAS,SAAAR,GAAC,OAAIoB,EAASpB,EAAG,iBAChE,0BAAMzD,UAAU,mBAAmBiE,QAAS,SAAAR,GAAC,OAAIuB,EAAWvB,EAAG,kBAEnE,wBAAIuC,MAAM,OAAOjF,EAAE,eACf,0BAAMf,UAAU,sBAAsBiE,QAAS,SAAAR,GAAC,OAAIoB,EAASpB,EAAG,kBAChE,0BAAMzD,UAAU,mBAAmBiE,QAAS,SAAAR,GAAC,OAAIuB,EAAWvB,EAAG,qBA5H/D,WAChB,IAAKa,EAAkBe,OACnB,OAAO,4BAAI,4BAAKtE,EAAE,eACtB,IAAMkF,EAAmB3B,EAAkB4B,OAAOxB,EAAY,GAAKF,EAAkBE,EAAYF,GAC3F2B,GAAczB,EAAY,GAAKF,EAAmB,EACxD,OAAOyB,EAAiBlC,KAAI,SAAC6B,EAASQ,GAClC,OACI,2BAAOpC,IAAK4B,EAAO,SACf,4BACA,wBAAII,MAAM,OAAOG,EAAaC,GAC9B,4BAAI,yBAAKC,IAAKT,EAAO,YAAP,KAAgCU,IAAI,GAAGC,MAAM,OAAOC,OAAO,OAAOxG,UAAU,4BAAiC4F,EAAO,SAClI,4BAAKlG,EAAiBkG,EAAO,QAC7B,4BAAKlG,EAAiBkG,EAAO,SAC7B,4BAAKlG,EAAiBkG,EAAO,YAC7B,4BAAKlG,EAAiBkG,EAAO,aAC7B,4BAAKlG,EAAiBkG,EAAO,mBAiHhCa,IAGJnC,EAAkBe,OACf,yBAAKqB,aAAW,mBACZ,wBAAI1G,UAAU,4DACV,wBAAIA,UAAW,aAAeiF,EAAO,GAAK,cACtC,yBAAKjF,UAAW,cAAgB8C,EAAO,mBAAqB,mBACxDmB,QAAS,WAnEjCU,GAAe,SAAAgC,GAAQ,OAAIA,EAAS,OAoEP5F,EAAE,UApHT,WAEtB,IADA,IAAI6F,EAAc,GACTC,EAAI,EAAGA,GAAK1B,KAAKC,KAAKd,EAAkBe,OAASb,GAAmBqC,IACzED,EAAYE,KAAKD,GACrB,IAAIE,EAAmBrC,EACnBsC,EAAkBJ,EAAYvB,OAKlC,OAJI2B,EAAkBD,EAAmB,IAAGA,EAAmB5B,KAAK8B,IAAI,EAAGD,EAAgB,KAC3FJ,EAAcA,EAAYV,MAAMa,EAAiB,EAAGC,IACpC3B,OAAS,GAAGuB,EAAYM,OAAO,EAAEN,EAAYvB,OAAO,EAAE,OAClE0B,EAAmB,IAAIH,EAAYM,OAAO,EAAG,EAAG,EAAE,OAC/CN,EAAY7C,KAAI,SAACoD,EAAKf,GACzB,OACI,wBAAIpG,UAAW,aAAuB,QAARmH,EAAgB,YAAc,IAAMnD,IAAKoC,GACnE,yBAAKpG,UAAW,cAAgB8C,EAAO,mBAAqB,oBAAsB4B,IAAgByC,EAAM,UAAY,IACjH5D,GAAI4D,EACJlD,QAAS,SAAAR,GAAMkB,EAAe1E,OAAOwD,EAAEC,OAAOH,OAC5C4D,OAuGJC,GACD,wBAAIpH,UAAW,aAAesF,EAAO,GAAK,cAClC,yBAAKtF,UAAW,cAAgB8C,EAAO,mBAAqB,mBACxDmB,QAAS,WAvEjCU,GAAe,SAAAgC,GAAQ,OAAIA,EAAS,OAwEP5F,EAAE,YAId,Q,QC3EVsG,EAnGE,WACb,IAAMvE,EAAO7C,OAAO8C,aAAaC,QAAQ,SACnCC,EAAQ,CACVC,gBAAkBJ,EAAM,OAAS,UACjCK,MAAQL,EAAM,OAAS,OACvByD,MAAO,QALQ,EAOa3F,mBAAS,IAPtB,mBAOX0G,EAPW,KAOFC,EAPE,OAQ2B3G,mBAAS,OARpC,mBAQX4G,EARW,KAQKC,EARL,OAS4B7G,mBAAS,MATrC,mBASX8G,EATW,KASMC,EATN,KAUX5G,EAAMC,cAAND,EACRE,qBAAU,WAAI,4CACV,8BAAAC,EAAA,+EAE6BC,MAAMZ,GAFnC,cAEca,EAFd,gBAG2BA,EAAOC,OAHlC,OAGcuG,EAHd,OAIQL,EAAW,YAAIK,IAJvB,kDAOQrG,QAAQC,IAAR,MAPR,2DADU,uBAAC,WAAD,wBAWVqG,KACF,IACF,IAAMC,EAAc,SAAAC,GAChB,IAAIC,EAAO,GAIX,OAHAnE,OAAOC,KAAKiE,GAAKE,SAAS,SAAAjE,GACtBgE,EAAKlB,KAAK,CAAEnH,EAAGqE,EAAKkE,EAAIH,EAAI/D,QAEzBgE,GAmBLG,EAAcb,EAAQc,MAAK,SAAAxC,GAAO,OAAIA,EAAO,UAAgB4B,GAAkB5B,EAAO,WAAiB8B,KACzGE,EAAO,GACPO,IACAP,EAAO,CACPS,OAAQxE,OAAOC,KAAKqE,EAAW,SAAX,OACpBG,SAAU,CACN,CACIC,MAAOxH,EAAE,aACT6G,KAAME,EAAYK,EAAW,SAAX,OAClBjF,gBAAiB,WAErB,CACIqF,MAAOxH,EAAE,UACT6G,KAAME,EAAYK,EAAW,SAAX,QAClBjF,gBAAiB,WAErB,CACIqF,MAAOxH,EAAE,aACT6G,KAAME,EAAYK,EAAW,SAAX,WAClBjF,gBAAiB,cAK7B,IAAMsF,EAAU,CACZC,SAAU,CACNC,UAAW,CACRH,MAAO,SAASI,EAAaf,GACzB,IAAIW,EAAQX,EAAKU,SAASK,EAAYC,cAA1B,MACb,OAAOL,EAAQ,KAAO7I,EAAiBiJ,EAAYE,WAI7DC,YAAY,EACZC,qBAAqB,GAEzB,OACI,yBAAK/I,UAAU,QACX,yBAAKA,UAAU,0DACX,4BAAKe,EAAE,aACP,4BAAQf,UAAU,oBAAoBwD,SAAU,SAAAC,GAAC,OA9CxC,SAAAA,GAAM,IAAD,EACIA,EAAEC,OAAOxD,MAAM8I,MAAM,MADzB,mBACjBpD,EADiB,KACRqD,EADQ,KAEjBA,IAAUA,EAAW,MAC1BxB,EAAkB7B,GAClB+B,EAAmBsB,GA0C0C1D,CAAa9B,IAAIR,MAAOA,GAxDrEqE,EAAQvD,KAAI,SAAA6B,GACxB,OAAOA,EAAO,SAAeA,EAAO,SAAe,KAAOA,EAAO,SAAe,OAEnE7B,KAAI,SAAA6B,GACnB,MACc,QAAZA,EAAoB,4BAAQ1F,MAAO0F,EAAS5B,IAAK4B,EAASJ,UAAQ,GAAEI,GACpE,4BAAQ1F,MAAO0F,EAAS5B,IAAK4B,GAAUA,QAsDvC,yBAAM5F,UAAW8C,EAAO,kBAAoB,iBAAkBG,MAAO,CAACsD,MAAQ,SAC1E,kBAAC,IAAD,CAAKqB,KAAMA,EAAMpB,OAAQ,IAAKgC,QAASA,OCxDxCU,EAtCE,SAACnJ,GACd,IAAMyI,EAAU,CACZW,OAAQ,CACJhG,MAAQpD,EAAMyI,QAAN,WAEZY,MAAO,CACHC,UAAW,CACXlG,MAAOpD,EAAMyI,QAAN,WAEPc,WAAY,CACZnG,MAAQpD,EAAMyI,QAAN,YAGZM,YAAa,EACbL,SAAU,CACNC,UAAW,CACRH,MAAO,SAASI,EAAaf,GAC1B,IAAIW,EAAQX,EAAKS,OAAOM,EAAYvC,OACpC,OAAOmC,EAAQ,KAAO7I,EAAiBiJ,EAAYE,YAK3DjB,EAAO,CACTU,SAAU,CAAC,CACPV,KAAO7H,EAAM6H,KACb1E,gBAAiBnD,EAAMwJ,SAG3BlB,OAAQtI,EAAMsI,QAElB,OACI,6BACI,kBAAC,IAAD,CAAOT,KAAMA,EAAOY,QAASA,GAA7B,OCKGgB,EApCS,WACpB,IAAM1G,EAAO7C,OAAO8C,aAAaC,QAAQ,SACjCjC,EAAMC,cAAND,EACFyH,EAAU,CACZiB,UAAY3G,EAAM,OAAS,OAC3B4G,UAAY5G,EAAM,OAAS,QALL,EAOYlC,mBAAS,IAPrB,mBAOlB+I,EAPkB,KAONC,EAPM,KAQ1B3I,qBAAU,WAAI,4CACV,8BAAAC,EAAA,+EAE6BC,MRZRf,2CQUrB,cAEcgB,EAFd,gBAGiCA,EAAOC,OAHxC,OAGcsI,EAHd,OAIQC,EAAc,YAAID,IAJ1B,kDAOQpI,QAAQC,IAAR,MAPR,2DADU,uBAAC,WAAD,wBAWVqI,KACF,IACF,IAAMC,EAAU,SAAA9F,GACZ,OAAO2F,EAAW5F,KAAI,SAAAgG,GAAS,OAAIA,EAAU/F,OAE3CgG,EAAkBF,EAAQ,aAEhC,OACI,6BACI,yBAAK7G,MAAO,CAACsD,MAAQ,SACjB,4BAAKxF,EAAE,qBACP,kBAAC,EAAD,CAAUsH,OAAQ2B,EAAiBT,OALhC,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAKR3B,KAAMkC,EAAQ,SAAUtB,QAASA,O,iCCwCrFyB,EAlEA,SAAAlK,GAAU,IAAD,EACIa,mBAAS,IADb,mBACdgH,EADc,KACRsC,EADQ,OAEUtJ,mBAAS,IAFnB,mBAEduJ,EAFc,KAELC,EAFK,KAGdrJ,EAAMC,cAAND,EACRE,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACyBC,MAAMV,GAD/B,cACUW,EADV,gBAEuBA,EAAOC,OAF9B,OAEUuG,EAFV,OAGUyC,EAAQzC,EAAKQ,MAAK,SAAAkC,GAAI,MAAqB,YAAjBA,EAAI,SACpCJ,EAAQ,YAAItC,IACZ7H,EAAMmE,QAAN,eAAkBmG,IALtB,4CADc,uBAAC,WAAD,wBAQdE,KACC,IACH,IAUM7I,EAAQkG,EAAK7D,KAAI,SAAAuG,GAAI,OAAGA,EAAKvK,EAAM2D,WACnC8G,EAAaC,cAClBC,OAAO,CAACvF,KAAKwF,IAAL,MAAAxF,KAAI,YAAQzD,IAAQyD,KAAK8B,IAAL,MAAA9B,KAAI,YAAQzD,MACxCkJ,MAAM,CAAC,UAAW,YACnB,OACM,6BACA,kBAAC,gBAAD,CAAgBC,WAAS,GAAGC,WAAW,gBACnC,kBAAC,cAAD,CAAaC,UAlCV,4DAmCF,qBAAGC,YACYjH,KAAI,SAAAkH,GAChB,IAAMC,EAAMtD,EAAKQ,MAAK,SAAA+C,GAAC,OAAIA,EAAC,OAAaF,EAAG,WAAH,QACzC,OACI,kBAAC,YAAD,CACAjH,IAAKiH,EAAIG,OACTL,UAAWE,EACXhH,QAAW,kBAAM,WAA0B,OAApB1C,QAAQC,IAAIyJ,GAAeA,EAAG,WAAH,OAClDI,KAAOH,EAAIV,EAAWU,EAAIxJ,OAAS,OACnC4J,OAAS,OACTC,aAAgB,SAAC9H,GAAD,OA5Bd,SAACA,EAAGwH,EAAKC,GAC3B,IAAMb,EAAQzC,EAAKQ,MAAK,SAAAkC,GAAI,OAAIA,EAAI,OAAaW,EAAG,QAEpD,OADAlL,EAAMmE,QAAN,eAAkBmG,IACXa,EAAKd,EAAW,GAAD,OAAIc,EAAG,MAAP,aAAqBA,EAAInL,EAAM2D,QAA/B,YAA0C3C,EAAEhB,EAAMoK,WAAa,GAyB9CqB,CAAY/H,EAAGwH,EAAIQ,WAAYP,IACtDQ,aAAgB,kBAxBT,WACvB,IAAMrB,EAAQzC,EAAKQ,MAAK,SAAAkC,GAAI,MAAqB,YAAjBA,EAAI,SACpCvK,EAAMmE,QAAN,eAAkBmG,IAClBD,EAAW,IAqB2BuB,IACtB1I,MAAO,CACL2I,QAAS,CACPC,QAAS,QAEXC,MAAO,CACLD,QAAS,QAEXE,QAAS,CACPF,QAAS,kBASzB,kBAAC,IAAD,KAAgB1B,KCJT6B,EA/DF,WACT,IAAMlJ,EAAO7C,OAAO8C,aAAaC,QAAQ,SACnCC,EAAQ,CACVE,MAAQL,EAAM,UAAY,UAC1B4G,UAAa5G,EAAM,YAAc,cAG7B/B,EAAMC,cAAND,EAPO,EAQWH,mBAAS,aAAC,QAAY,EAAG,MAAU,GAAI,UAAc,EAAG,OAAW,EAAG,OAAW,EAAG,WAAe,EAAG,YAAgB,GAA9G,UAA6H,IARhJ,mBAQPgH,EARO,KAQDsC,EARC,KAST+B,EAAK,IAAIC,KAAKtE,EAAKtG,SACzB,OACI,yBAAKtB,UAAU,QACV,wBAAIA,UAAU,QAAQe,EAAE,kBACzB,6BACI,yBAAKf,UAAU,0DACX,yBAAKA,UAAU,WAAWiD,MAAO,CAACsD,MAAM,SACtC,kBAAC,EAAD,CAAQ7C,OAAO,QAAQyG,QAAQ,iBAAiBjG,QAAWgG,KAE7D,yBAAKlK,UAAU,WAAWiD,MAAO,CAACsD,MAAQ,SACtC,wBAAIvG,UAAU,mBAAmBiD,MAAOA,GAAQ2E,EAAKyC,OACrD,yBAAKrK,UAAU,gCACX,2BAAOmM,IAAI,YAAYnM,UAAU,wBAAwBe,EAAE,aAAe,MAC1E,yBAAKf,UAAU,SACf,2BAAOyF,KAAK,OAAOzF,UAAW,0BAA4BiD,EAAMyG,UAAYnG,GAAG,YAAYrD,MAAOR,EAAiBkI,EAAKlG,WAG5H,yBAAK1B,UAAU,kBACX,2BAAOmM,IAAI,SAASnM,UAAU,wBAAwBe,EAAE,UAAY,MACpE,yBAAKf,UAAU,SACf,2BAAOyF,KAAK,OAAMzF,UAAW,0BAA4BiD,EAAMyG,UAAYnG,GAAG,SAASrD,MAAOR,EAAiBkI,EAAKjG,YAGxH,yBAAK3B,UAAU,kBACX,2BAAOmM,IAAI,SAASnM,UAAU,wBAAwBe,EAAE,UAAY,MACpE,yBAAKf,UAAU,SACf,2BAAOyF,KAAK,OAAOzF,UAAW,0BAA4BiD,EAAMyG,UAAYnG,GAAG,SAASrD,MAAOR,EAAiBkI,EAAKwE,YAGzH,yBAAKpM,UAAU,kBACX,2BAAOmM,IAAI,aAAanM,UAAU,wBAAwBe,EAAE,cAAgB,MAC5E,yBAAKf,UAAU,SACf,2BAAOyF,KAAK,OAAOzF,UAAW,0BAA4BiD,EAAMyG,UAAYnG,GAAG,aAAarD,MAAOR,EAAiBkI,EAAKyE,gBAG7H,yBAAKrM,UAAU,kBACX,2BAAOmM,IAAI,cAAcnM,UAAU,wBAAwBe,EAAE,eAAiB,MAC9E,yBAAKf,UAAU,SACf,2BAAOyF,KAAK,OAAOzF,UAAW,0BAA4BiD,EAAMyG,UAAWnG,GAAG,cAAcrD,MAAOR,EAAiBkI,EAAK0E,iBAG7H,yBAAKtM,UAAU,kBACX,2BAAOmM,IAAI,UAAUnM,UAAU,wBAAwBe,EAAE,WAAa,MACtE,yBAAKf,UAAU,SACf,2BAAOyF,KAAK,OAAOzF,UAAW,0BAA4BiD,EAAMyG,UAAYnG,GAAG,UAAUrD,MAAO+L,EAAGM,0BCwBhHC,EA5EG,WAAO,IAAD,EACwB5L,mBAAS,IADjC,mBACZ6L,EADY,KACGC,EADH,KAEZ3L,EAAMC,cAAND,EACRE,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,+EAE6BC,MAAMX,GAFnC,cAEcY,EAFd,gBAG8BA,EAAOC,OAHrC,OAGciG,EAHd,OAIQoF,EAAiB,eAAIpF,IAJ7B,kDAOQ/F,QAAQC,IAAR,MAPR,2DADY,uBAAC,WAAD,wBAWZmL,KACF,IACF,IAAM7E,EAAc,SAAAC,GAChB,IAAIC,EAAO,GAIX,OAHAnE,OAAOC,KAAKiE,GAAKE,SAAQ,SAAAjE,GACrBgE,EAAKlB,KAAK,CAACnH,EAAGqE,EAAKkE,EAAGH,EAAI/D,QAEvBgE,GAEPJ,EAAO,GAC+B,IAAtC/D,OAAOC,KAAK2I,GAAepH,SAC3BuC,EAAO,CACHS,OAAQxE,OAAOC,KAAK2I,EAAa,OACjCnE,SAAU,CAAC,CACPC,MAAOxH,EAAE,aACT6G,KAAOE,EAAY2E,EAAa,OAChCvJ,gBAAkB,QAEtB,CACIqF,MAAOxH,EAAE,UACT6G,KAAOE,EAAY2E,EAAa,QAChCvJ,gBAAkB,OAEtB,CACIqF,MAAOxH,EAAE,aACT6G,KAAOE,EAAY2E,EAAa,WAChCvJ,gBAAkB,YAK9B,IAAMsF,EAAU,CACZC,SAAU,CACNC,UAAW,CACRH,MAAO,SAASI,EAAaf,GACzB,IAAIW,EAAQX,EAAKU,SAASK,EAAYC,cAA1B,MACb,OAAOL,EAAQ,KAAO7I,EAAiBiJ,EAAYE,WAI7DC,YAAa,EACb8D,SACI,CACIC,KACI,CACIxB,MAAO,IAGnBlC,OACA,CACId,OAAS,CAAEyE,eAAgB,KAIvC,OACI,yBAAK7J,MAAO,CAACsD,MAAM,SACf,4BAAKxF,EAAE,mBACP,kBAAC,IAAD,CAAM6G,KAAMA,EAAMY,QAASA,MCuBxBuE,EA9FM,WACjB,IAAMjK,EAAO7C,OAAO8C,aAAaC,QAAQ,SACjCjC,EAAMC,cAAND,EAFe,EAGaH,mBAAS,IAHtB,mBAGfoM,EAHe,KAGJC,EAHI,OAI4BrM,mBAAS,IAJrC,mBAIfsM,EAJe,KAIIC,EAJJ,KAKvBlM,qBAAU,WAAI,4CACV,8BAAAC,EAAA,sEACyBC,MAAMT,GAD/B,cACUU,EADV,gBAEuBA,EAAOC,OAF9B,OAEUuG,EAFV,OAGIuF,EAAoB,YAAIvF,IACxBqF,EAAa,YAAIrF,IAJrB,4CADU,uBAAC,WAAD,wBAOVwF,KACF,IACF,IAqBIxF,EAAO,GACPoF,EAAU3H,SACVuC,EAAO,CACHS,OAjBQ,WACZ,IAAIL,EAAO,GAIX,OAHAgF,EAAU/E,SAAQ,SAAAoF,GACdrF,EAAKlB,KAAKuG,EAAG,eAEVrF,EAYKsF,GACRhF,SAAW,CAAC,CACRC,MAAQ,YACRX,KA3BQ,SAAA5D,GAChB,IAAIgE,EAAO,GAIX,OAHAgF,EAAU/E,SAAQ,SAAAoF,GACdrF,EAAKlB,KAAK,CAACnH,EAAG,IAAIuM,KAAKmB,EAAG,WAAerE,MAAM,KAAKuE,KAAK,MAAMC,UAAWtF,EAAGmF,EAAIrJ,QAE9EgE,EAsBMyF,CAAY,kBACjBvK,gBAAmBJ,EAAM,UAAY,cAIjD,IAAM0F,EAAU,CACZkF,OAAQ,CACJC,MAAO,CACH,CACIC,MACI,CACIC,SAAU,SAAC3N,GACX,OAAO,IAAIgM,KAAKhM,GAAO4N,mBAAmB,QAAS,CAACC,MAAO,QAAQC,KAAM,iBAM7FvF,SAAU,CACNC,UAAW,CACRH,MAAO,SAASI,EAAaf,GAC1B,IAAIW,EAAQX,EAAKS,OAAOM,EAAYvC,OACpC,OAAOmC,EAAQ,KAAO7I,EAAiBiJ,EAAYE,QAAU,IAAM9H,EAAE,YAI/EoI,OAAQ,CACJ8E,SAAS,GAEbnF,YAAa,EACbC,qBAAqB,GAEzB,OACI,yBAAK/I,UAAU,QACX,yBAAKA,UAAU,gEACX,wBAAIA,UAAU,YAAYe,EAAE,qBAC5B,yBAAKf,UAAU,YACX,2BAAOyF,KAAK,QACZzF,UAAU,qBACV2K,IAAK,EACL1D,IAAKiG,EAAkB7H,OACvB7B,SAAU,SAAAC,GAAC,OAtDL,SAAAA,GAClB,IAAImE,EAAI,YAAOsF,GACX9G,EAAQnG,OAAOwD,EAAEC,OAAOxD,OAC5B0H,EAAKV,OAAOd,EAAO8G,EAAkB7H,OAASe,GAC9C7E,QAAQC,IAAIoG,EAAKvC,QACjB4H,EAAa,YAAIrF,IAiDUsG,CAAczK,IAC7B0K,aAAcjB,EAAkB7H,OAChCpC,MAAQ,CAACC,gBAAiB,WAGlC,yBAAMlD,UAAW8C,EAAO,kBAAoB,iBAAkBG,MAAO,CAACsD,MAAQ,SAC1E,kBAAC,IAAD,CAASqB,KAAMA,EAAMpB,OAAQ,IAAKgC,QAAWA,OC7E9C4F,G,OAbA,SAAArO,GAAU,IACbgB,EAAMC,cAAND,EACR,OACI,yBAAKf,UAAU,eACX,uBAAGA,UAAU,wCAAwCe,EAAE,eAAvD,IAAuE,8BAAO,IAAImL,KAAKnM,EAAMuB,SAASiL,mBACtG,yBAAKvM,UAAU,iCACX,uBAAGA,UAAU,QAAQe,EAAE,cAAvB,IAAsC,uBAAGsN,KAAK,sBAAsB3K,OAAO,UAArC,oBACtC,uBAAG1D,UAAU,QAAb,KACA,uBAAGA,UAAU,OAAOe,EAAE,WAAtB,IAAkC,uBAAGsN,KAAK,sCAAsC3K,OAAO,UAArD,sBCoDnC4K,E,kDAnDb,WAAYvO,GAAQ,IAAD,uBACjB,cAAMA,IAWRwO,WAAa,WACX,EAAKC,UAAS,SAAAC,GAGV,OAFFC,SAASC,cAAc,QAAQ3O,UAAayO,EAAU3L,KAAO,YAAc,aAC3EC,aAAaY,QAAQ,OAAQiL,KAAKC,UAAU,EAAEJ,EAAU3L,OAC/C,CACLA,KAAO,EAAI2L,EAAU3L,UAjBV,EAqBnBgM,cAAgB,SAAAC,GACd,EAAKP,SAAS,CACZQ,QAAUD,KAvBK,EA0BnBE,aAAe,SAAAC,GAAI,OAAI,EAAKV,SAAS,CAAClN,QAAU4N,KAxB9C,IAAMpM,OAAwCqM,IAAjCpM,aAAaC,QAAQ,QAAwB/C,OAAO8C,aAAaC,QAAQ,SAAW,EAFhF,OAGjB,EAAKqH,MAAQ,CACX2E,QAAU,YACVlM,KAAQA,EACRxB,QAAS,GAEXyB,aAAaY,QAAQ,OAAQiL,KAAKC,UAAU,EAAKxE,MAAMvH,OACvD4L,SAASC,cAAc,QAAQ3O,UAAY,EAAKqK,MAAMvH,KAAM,aAAe,YAT1D,E,qDA6BjB,OACG,kBAAC,IAAMsM,SAAP,KACG,kBAAC,EAAD,CAAQlL,QAASmL,KAAKd,aACtB,0BAAMvO,UAAU,aACd,kBAAC,EAAD,CAAasB,QAAS+N,KAAKJ,eAC3B,yBAAKjP,UAAU,+DACb,yBAAKA,UAAU,YAAW,kBAAC,EAAD,OAC1B,yBAAKA,UAAU,YAAW,kBAAC,EAAD,QAE5B,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAQsB,QAAS+N,KAAKhF,MAAM/I,e,GA5CpBgO,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASqB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhP,QAAQgP,MAAMA,EAAMC,a","file":"static/js/main.1c16bfdf.chunk.js","sourcesContent":["export function numberWithCommas(x) {\r\n    if (!x) return \"0\"\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React from 'react'\r\nimport { numberWithCommas } from '../../utils/commas';\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='card'>\r\n            <h1>{numberWithCommas(Number(props.value))}</h1>\r\n            <p>{props.title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","export const BASE_URL = \"https://corona.lmao.ninja/v2\" \r\nexport const GLOBAL_URL = BASE_URL + \"/all\";\r\nexport const COUNTRY_URL = BASE_URL + \"/countries\"; \r\nexport const HISTORY_URL = BASE_URL + \"/historical?lastdays=all\";\r\nexport const GLOBAL_HISTORY_URL = BASE_URL + \"/historical/all?lastdays=all\";\r\nexport const CONTINENT_URL = BASE_URL + \"/continents\";\r\nexport const STATE_URL = BASE_URL + \"/states\";\r\nexport const DAILY_URL = \"https://covid19.mathdro.id/api/daily\"","import React, { useState, useEffect } from 'react'\r\nimport Card from '../Card/Card'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { GLOBAL_URL } from '../../api/api'\r\nconst GlobalStats = props => {\r\n    const [globalStats, setGlobalStats] = useState({}) \r\n    const { t } = useTranslation();\r\n    useEffect(()=>{\r\n        async function fetchGlobalSummary() {\r\n            try {\r\n                const result = await fetch(GLOBAL_URL)\r\n                const globalStats = await result.json();\r\n                setGlobalStats({...globalStats});\r\n                props.updated(globalStats[\"updated\"])\r\n            }\r\n            catch (error){\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchGlobalSummary();\r\n    }, [])\r\n    return (\r\n        <div className=\" d-flex flex-column flex-lg-row align-items-center justify-content-lg-between\">\r\n            <div>\r\n                <Card title={t('confirmed')} value={globalStats.cases}></Card>\r\n            </div>\r\n            <div>\r\n                <Card title={t('deaths')} value={globalStats.deaths}></Card>\r\n            </div>\r\n            <div>\r\n                <Card title={t('recovered')} value={globalStats.recovered}></Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlobalStats;","import i18n from \"i18next\";\r\nimport {initReactI18next} from \"react-i18next\";\r\nimport detector from \"i18next-browser-languagedetector\"\r\nimport translationEN from \"../locales/en/translation.json\"\r\nimport translationVN from \"../locales/vn/translation.json\"\r\nconst resources = {\r\n  en: {\r\n    translation: translationEN\r\n  },\r\n  vn : {\r\n    translation: translationVN\r\n  }\r\n};\r\ni18n\r\n  .use(detector)\r\n  .use(initReactI18next) \r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n    fallbackLng: \"en\", \r\n    keySeparator: false, \r\n    interpolation: {\r\n      escapeValue: false,\r\n    }\r\n  });\r\nexport default i18n;","const locales = {\r\n    'en' : {\r\n        name : 'English'\r\n    },\r\n    'vn' : {\r\n        name : 'Tiếng Việt'\r\n    }\r\n};\r\nexport default locales;","import React, { useState } from 'react'\r\nimport i18n from '../../utils/i18n'\r\nimport locales from '../../locales/locales'\r\nimport '../../styles/Header.css'\r\nconst Header = (props) => {\r\n    const mode = Number(localStorage.getItem('mode'));\r\n    const style = {\r\n        backgroundColor : mode? \"#FFB347\" : \"#C51F5D\",\r\n        color : mode? \"#000\" : \"#FFF\"\r\n    }\r\n    const [language, setLanguage] = useState(localStorage.getItem(\"language\") || 'en');\r\n    i18n.changeLanguage(language);\r\n    const languages = ()=> {\r\n        return Object.keys(locales).map((key)=>{\r\n            return <option key={key} value={key}>{locales[key].name}</option>\r\n        })\r\n    }\r\n    const handleLanguageChanged = (e) => {\r\n        setLanguage(e.target.value);\r\n        localStorage.setItem(\"language\", e.target.value);\r\n        i18n.changeLanguage(e.target.value);\r\n    }\r\n    return(\r\n        <header className=\"container d-flex pt-2\">\r\n            <div className=\"mr-auto\">\r\n                <p id=\"logo\">COVID-19 BROADCAST</p>\r\n            </div>  \r\n            <div>\r\n                <select onChange={(e)=>handleLanguageChanged(e)} value={language} className={\"form-control-sm m-0 \" + (mode ? \"light-select\" : \"dark-select\")}>\r\n                    {languages()}       \r\n                </select>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn ml-2 btn-sm rounded-circle\" style={style}  onClick={props.changed}><i className={mode?\"fa fa-sun-o\":\"fa fa-moon-o\"}></i></button>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react'\r\nimport { COUNTRY_URL } from '../../api/api';\r\nimport { useTranslation } from 'react-i18next'\r\nimport '../../styles/DataTable.css'\r\nimport { numberWithCommas } from '../../utils/commas';\r\nconst DataTable = () => {\r\n    const mode = Number(localStorage.getItem('mode'));\r\n    const style = {\r\n        backgroundColor : mode? \"#FFF\" : \"#243447\",\r\n        color : mode? \"#000\" : \"#FFF\",\r\n    }\r\n    const { t } = useTranslation();\r\n    const [ countriesData, setCountriesData ] = useState([]);\r\n    const [ copyCountriesData, setCopyCountriesData ] = useState([]); \r\n    const [ numberOfViewRows, setNumberOfViewRows ] = useState(5);\r\n    const [ currentPage, setCurrentPage ] = useState(1);\r\n    useEffect(()=>{\r\n        async function fetchCountriesData() {\r\n            try {\r\n                const result = await fetch(COUNTRY_URL);\r\n                const countriesData = await result.json();\r\n                setCountriesData([...countriesData]);\r\n                setCopyCountriesData([...countriesData]);\r\n            }\r\n            catch (error){\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchCountriesData();\r\n    },[])\r\n\r\n    const displayData = () => {\r\n        if (!copyCountriesData.length) \r\n            return <tr><td>{t(\"noResults\")}</td></tr>\r\n        const currentCountries = copyCountriesData.slice((currentPage-1) * numberOfViewRows, currentPage*numberOfViewRows);\r\n        const startIndex = (currentPage-1) * numberOfViewRows + 1;\r\n        return currentCountries.map((country, index)=>{\r\n            return (\r\n                <tbody key={country[\"country\"]}>\r\n                    <tr>\r\n                    <th scope=\"row\">{startIndex + index}</th>\r\n                    <td><img src={country[\"countryInfo\"][\"flag\"]} alt=\"\" width=\"30px\" height=\"20px\" className=\"mr-2 d-none d-sm-inline\"></img>{country[\"country\"]}</td>\r\n                    <td>{numberWithCommas(country[\"cases\"])}</td>\r\n                    <td>{numberWithCommas(country[\"deaths\"])}</td>\r\n                    <td>{numberWithCommas(country[\"recovered\"])}</td>\r\n                    <td>{numberWithCommas(country[\"todayCases\"])}</td>\r\n                    <td>{numberWithCommas(country[\"todayDeaths\"])}</td>\r\n                    </tr>\r\n                </tbody>\r\n            )\r\n        })\r\n    }\r\n    const displayPagination = () => {\r\n        let pageNumbers = [];\r\n        for (let i = 1; i <= Math.ceil(copyCountriesData.length / numberOfViewRows); i++)\r\n            pageNumbers.push(i);\r\n        let indexOfFirstPage = currentPage;\r\n        let indexOfLastPage = pageNumbers.length;\r\n        if (indexOfLastPage - indexOfFirstPage < 3) indexOfFirstPage = Math.max(1, indexOfLastPage-3);\r\n        pageNumbers = pageNumbers.slice(indexOfFirstPage-1, indexOfLastPage);\r\n        if (pageNumbers.length > 6) pageNumbers.splice(4,pageNumbers.length-6,\"...\");\r\n        if (indexOfFirstPage > 10) pageNumbers.splice(0, 0, 1,\"...\");\r\n        return pageNumbers.map((num, index)=>{ \r\n            return (\r\n                <li className={\"page-item\" + (num === \"...\" ? \" disabled\" : \"\")}  key={index}>\r\n                    <div className={\"page-link \" + (mode ? \"light-pagination\" : \"dark-pagination\") + (currentPage === num ? \" active\" : \"\")}  \r\n                       id={num} \r\n                       onClick={e => {setCurrentPage(Number(e.target.id));}}>\r\n                        {num}\r\n                    </div>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    const handleSelect = (e) => {\r\n        setNumberOfViewRows(Number(e.target.value)); \r\n        setCurrentPage(1);\r\n    }\r\n\r\n    const onSearch = (e) => {\r\n        const copyCountriesData = countriesData.filter(country => {\r\n            return country[\"country\"].toLowerCase().startsWith(e.target.value.toLowerCase());\r\n        })\r\n        setCopyCountriesData([...copyCountriesData]);\r\n        setCurrentPage(1);\r\n    }\r\n\r\n    const onSortUp = (e, key) => {\r\n        let copyCountriesData = [...countriesData];\r\n        copyCountriesData.sort((a,b)=> a[key] > b[key] ? 1 : -1 );\r\n        setCopyCountriesData([...copyCountriesData]);\r\n    }\r\n    const onSortDown = (e, key) => {\r\n        let copyCountriesData = [...countriesData];\r\n        copyCountriesData.sort((a,b)=> a[key] < b[key] ? 1 : -1 );\r\n        setCopyCountriesData([...copyCountriesData]);\r\n    }\r\n\r\n    const prevClick = () => {\r\n        setCurrentPage(prevPage => prevPage-1);\r\n    }\r\n    const nextClick = () => {\r\n        setCurrentPage(prevPage => prevPage+1);\r\n    }\r\n    const prev = (currentPage !== 1);\r\n    const totalPages = Math.ceil(copyCountriesData.length / numberOfViewRows)\r\n    const next = (currentPage !== totalPages);\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <div className=\"d-flex  flex-column flex-sm-row justify-content-between mb-3\">\r\n                <div className=\"d-inline-flex\">\r\n                    <span className=\"mt-1\">{t(\"show\")}</span>\r\n                    <select className=\"form-control-sm mx-2 view-rows\" onChange={e => handleSelect(e)} style={style}>\r\n                        <option value=\"5\" selected>5</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"50\">50</option>\r\n                        <option value=\"100\">100</option>\r\n                    </select>\r\n                    <span className=\"mt-1\">{t(\"records\")}</span>\r\n                </div>\r\n                <div className=\"input-group search-bar mt-2 mt-sm-0\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder={t(\"searchCountry\")} onChange={e => onSearch(e)} style={style}/>\r\n                    <div className=\"input-group-append\">\r\n                        <span className=\"input-group-text\"><i className=\"fa fa-search\" onChange></i></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <table className= {\"table table-borderless \" + (mode ? \"border\" : \"\")} style={style}>\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">{t(\"country\")} \r\n                        <span className=\"ml-1 fa fa-arrow-up \" onClick={e => onSortUp(e, \"country\")}></span>\r\n                        <span className=\"fa fa-arrow-down\" onClick={e => onSortDown(e, \"country\")}></span>\r\n                    </th>\r\n                    <th scope=\"col\">{t(\"confirmed\")}\r\n                        <span className=\"ml-1 fa fa-arrow-up\" onClick={e => onSortUp(e, \"cases\")}></span>\r\n                        <span className=\"fa fa-arrow-down\" onClick={e => onSortDown(e, \"cases\")}></span>\r\n                    </th>\r\n                    <th scope=\"col\">{t(\"deaths\")}\r\n                        <span className=\"ml-1 fa fa-arrow-up\" onClick={e => onSortUp(e, \"deaths\")}></span>\r\n                        <span className=\"fa fa-arrow-down\" onClick={e => onSortDown(e, \"deaths\")}></span> \r\n                    </th>\r\n                    <th scope=\"col\">{t(\"recovered\")}\r\n                        <span className=\"ml-1 fa fa-arrow-up\" onClick={e => onSortUp(e, \"recovered\")}></span>\r\n                        <span className=\"fa fa-arrow-down\" onClick={e => onSortDown(e, \"recovered\")}></span>\r\n                    </th>\r\n                    <th scope=\"col\">{t(\"todayCases\")} \r\n                        <span className=\"ml-1 fa fa-arrow-up\" onClick={e => onSortUp(e, \"todayCases\")}></span>\r\n                        <span className=\"fa fa-arrow-down\" onClick={e => onSortDown(e, \"todayCases\")}></span>\r\n                    </th>\r\n                    <th scope=\"col\">{t(\"todayDeaths\")}\r\n                        <span className=\"ml-1 fa fa-arrow-up\" onClick={e => onSortUp(e, \"todayDeaths\")}></span>\r\n                        <span className=\"fa fa-arrow-down\" onClick={e => onSortDown(e, \"todayDeaths\")}></span>\r\n                    </th>\r\n                    </tr>\r\n                </thead>\r\n                {displayData()}\r\n            </table>\r\n\r\n            {copyCountriesData.length ? \r\n                <nav aria-label=\"Page navigation\">\r\n                    <ul className=\"pagination justify-content-center justify-content-md-end\">\r\n                        <li className={\"page-item\" + (prev ? \"\" : \" disabled\")}>\r\n                            <div className={\"page-link \" + (mode ? \"light-pagination\" : \"dark-pagination\")}  \r\n                                onClick={()=>prevClick()}>\r\n                                    {t(\"prev\")}\r\n                            </div>\r\n                        </li>\r\n                    {displayPagination()}\r\n                    <li className={\"page-item\" + (next ? \"\" : \" disabled\")}>\r\n                            <div className={\"page-link \" + (mode ? \"light-pagination\" : \"dark-pagination\")} \r\n                                onClick={()=>nextClick()}>\r\n                                    {t(\"next\")}\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </nav> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataTable;","import React, { useState, useEffect } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { HISTORY_URL } from '../../api/api';\r\nimport { numberWithCommas } from '../../utils/commas';\r\nconst BarGraph = () => {\r\n    const mode = Number(localStorage.getItem('mode'));\r\n    const style = {\r\n        backgroundColor : mode? \"#FFF\" : \"#243447\",\r\n        color : mode? \"#000\" : \"#FFF\",\r\n        width: \"50vh\"\r\n    }\r\n    const [ history, setHistory ] = useState([]);\r\n    const [ currentCountry, setCurrentCountry ] = useState(\"USA\");\r\n    const [ currentProvince, setCurrentProvince] = useState(null);\r\n    const { t } = useTranslation();\r\n    useEffect(()=>{\r\n        async function fetchHistory() {\r\n            try {\r\n                const result = await fetch(HISTORY_URL);\r\n                const data = await result.json();\r\n                setHistory([...data]);\r\n            }\r\n            catch (error){\r\n                console.log(error);\r\n            }\r\n        } \r\n        fetchHistory();\r\n    },[])\r\n    const convertData = obj => {\r\n        let list = [];\r\n        Object.keys(obj).forEach( key => {\r\n            list.push({ x: key, y:  obj[key]});\r\n        })\r\n        return list;\r\n    }\r\n    const displayCountryOption = () => {\r\n        let countries = history.map(country => {\r\n            return country[\"country\"] + (country[\"province\"] ? \", \" + country[\"province\"] : \"\");\r\n        });\r\n        return countries.map(country => { \r\n          return ( \r\n            country === \"USA\" ? <option value={country} key={country} selected>{country}</option> : \r\n            <option value={country} key={country}>{country}</option>\r\n          )\r\n        })\r\n    }\r\n    const handleSelect = e => {\r\n        let [country, province] = e.target.value.split(\", \");\r\n        if (!province) province = null;\r\n        setCurrentCountry(country);\r\n        setCurrentProvince(province);\r\n    }\r\n    const countryData = history.find(country => country[\"country\"] === currentCountry && country[\"province\"] === currentProvince);\r\n    let data = {}\r\n    if (countryData) {\r\n        data = {\r\n        labels: Object.keys(countryData[\"timeline\"][\"cases\"]),\r\n        datasets: [ \r\n            {\r\n                label: t(\"confirmed\"), \r\n                data: convertData(countryData[\"timeline\"][\"cases\"]),\r\n                backgroundColor: \"#00BFFF\",\r\n            },\r\n            {\r\n                label: t(\"deaths\"), \r\n                data: convertData(countryData[\"timeline\"][\"deaths\"]),\r\n                backgroundColor: \"#FF6347\"\r\n            },\r\n            {\r\n                label: t(\"recovered\"), \r\n                data: convertData(countryData[\"timeline\"][\"recovered\"]),\r\n                backgroundColor: \"#00FF00\"\r\n            }\r\n        ]\r\n    };\r\n    }\r\n    const options = {\r\n        tooltips: {\r\n            callbacks: {\r\n               label: function(tooltipItem, data) {\r\n                   let label = data.datasets[tooltipItem.datasetIndex][\"label\"];\r\n                  return label + \": \" + numberWithCommas(tooltipItem.yLabel);\r\n               }\r\n            }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false\r\n    }\r\n    return(\r\n        <div className=\"mt-5\">\r\n            <div className=\"d-flex flex-column flex-sm-row justify-content-between\">\r\n                <h5>{t(\"timeline\")}</h5>\r\n                <select className=\"form-control mb-3\" onChange={e => handleSelect(e)} style={style}>\r\n                     {displayCountryOption()}\r\n                </select>\r\n            </div>\r\n            <div  className={mode ? \"light-mode card\" : \"dark-mode card\"} style={{width : \"100%\"}}>\r\n                <Bar data={data} height={400} options={options}></Bar>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarGraph;","import React from 'react'\r\nimport { Polar } from 'react-chartjs-2'\r\nimport { numberWithCommas } from '../../../utils/commas';\r\n\r\nconst PieChart = (props) => {\r\n    const options = { \r\n        legend: {\r\n            color : props.options[\"fontColor\"]\r\n        },\r\n        scale: {\r\n            gridLines: {\r\n            color: props.options[\"gridColor\"]\r\n            },\r\n            angleLines: {\r\n            color:  props.options[\"gridColor\"]\r\n            }\r\n        },\r\n        responsive : true,\r\n        tooltips: {\r\n            callbacks: {\r\n               label: function(tooltipItem, data) {\r\n                  let label = data.labels[tooltipItem.index];\r\n                  return label + \": \" + numberWithCommas(tooltipItem.yLabel);\r\n               }\r\n            }\r\n        },\r\n    }\r\n    const data = { \r\n        datasets: [{\r\n            data : props.data,\r\n            backgroundColor: props.colors,\r\n\r\n        }],\r\n        labels: props.labels\r\n    }\r\n    return(\r\n        <div>\r\n            <Polar data={data}  options={options}> </Polar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PieChart;","import React, { useState, useEffect } from 'react'\r\nimport PieChart from './PieChart/PieChart'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { PROXY_URL, CONTINENT_URL } from '../../api/api';\r\n\r\n\r\nconst ContinentsStats = () => {\r\n    const mode = Number(localStorage.getItem('mode'));\r\n    const { t } = useTranslation();\r\n    const options = {\r\n        gridColor : mode? \"#000\" : \"#FFF\",\r\n        fontColor : mode? \"#000\" : \"#FFF\"\r\n    }\r\n    const [ continents, setContinents ] = useState([]);\r\n    useEffect(()=>{\r\n        async function fetchContinents() {\r\n            try {\r\n                const result = await fetch(CONTINENT_URL);\r\n                const continents = await result.json();\r\n                setContinents([...continents])\r\n            }\r\n            catch (error){\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchContinents();\r\n    },[])\r\n    const getData = key => {\r\n        return continents.map(continent => continent[key]);\r\n    }\r\n    const continentLabels = getData(\"continent\");\r\n    const colors = [\"#e76f51\", \"#f4a261\", \"#e9c46a\", \"#2a9d8f\", \"#CD5C5C\", \"#264653\"];\r\n    return(\r\n        <div>\r\n            <div style={{width : \"100%\"}}>\r\n                <h5>{t('casesByContinent')}</h5>\r\n                <PieChart labels={continentLabels} colors={colors} data={getData(\"cases\")} options={options}></PieChart>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContinentsStats;\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\r\nimport { useTranslation } from 'react-i18next'\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport { STATE_URL } from \"../../api/api\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\n\r\nconst USAMap = props => {\r\n  const [ data, setData ] = useState([]);\r\n  const [ content, setContent ] = useState(\"\");\r\n  const { t } = useTranslation();\r\n  useEffect(() => {\r\n    async function fetchStates() {\r\n        const result = await fetch(STATE_URL);\r\n        const data = await result.json();\r\n        const state = data.find(item => item[\"state\"] == \"New York\");\r\n        setData([...data]);\r\n        props.changed({...state})\r\n    }\r\n    fetchStates();\r\n  }, []);\r\n  const handleHover = (e, geo, cur) => {\r\n    const state = data.find(item => item[\"state\"] == geo[\"name\"]);\r\n    props.changed({...state});\r\n    return cur? setContent(`${cur[\"state\"]}: ${cur[props.target]} ${t(props.content)}`): \"\";\r\n  }\r\n  const handleMouseLeave = () => {\r\n    const state = data.find(item => item[\"state\"] == \"New York\");\r\n    props.changed({...state});\r\n    setContent(\"\");\r\n  }\r\n  const cases = data.map(item=> item[props.target]);\r\n  const colorScale = scaleLinear()\r\n  .domain([Math.min(...cases), Math.max(...cases)])\r\n  .range([\"#ffedea\", \"#ff5233\"  ]);\r\n  return (\r\n        <div>\r\n        <ComposableMap  data-tip=\"\" projection=\"geoAlbersUsa\">\r\n            <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                const cur = data.find(s => s[\"state\"] == geo[\"properties\"][\"name\"]);\r\n                return (\r\n                    <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    onClick = {() => ()=> {console.log(geo);   return geo[\"properties\"][\"name\"]}}\r\n                    fill={ cur?colorScale(cur.cases) : \"#EEE\"}\r\n                    stroke = \"#000\"\r\n                    onMouseEnter = {(e) => handleHover(e, geo.properties, cur)}\r\n                    onMouseLeave = {() => handleMouseLeave()}\r\n                    style={{\r\n                      default: {\r\n                        outline: \"none\"\r\n                      },\r\n                      hover: {\r\n                        outline: \"none\"\r\n                      },\r\n                      pressed: {\r\n                        outline: \"none\"\r\n                      }\r\n                    }}\r\n                    />\r\n                );\r\n                })\r\n            }\r\n            </Geographies>\r\n        </ComposableMap>\r\n        <ReactTooltip >{content}</ReactTooltip>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default USAMap;\r\n","import React, { useState } from 'react'\r\nimport USAMap from './USAMap'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { numberWithCommas } from '../../utils/commas';\r\nconst Maps = () => {\r\n    const mode = Number(localStorage.getItem('mode'));\r\n    const style = {\r\n        color : mode? \"#FFB347\" : \"#C51F5D\",\r\n        fontColor :  mode? \"text-dark\" : \"text-light\"\r\n\r\n    }\r\n    const { t } = useTranslation();\r\n    const [ data, setData ] = useState({\"updated\" : 0, \"state\" : \"\", \"confirmed\" : 0, \"deaths\" : 0, \"active\" : 0, \"todayCases\" : 0, \"todayDeaths\" : 0, \"updated\" : 0});\r\n    const ts = new Date(data.updated);\r\n    return (\r\n        <div className=\"mt-5\">\r\n             <h5 className=\"mb-4\">{t('USStatesCases')}</h5>\r\n            <div>\r\n                <div className=\"d-flex flex-column flex-md-row justify-content-between\">\r\n                    <div className=\"col-md-7\" style={{width:\"100%\"}}>\r\n                      <USAMap target=\"cases\" content=\"confirmedCases\" changed = {setData}></USAMap>\r\n                    </div>\r\n                    <div className=\"col-md-5\" style={{width : \"100%\"}}>\r\n                        <h5 className=\"font-weight-bold\" style={style}>{data.state}</h5>\r\n                        <div className=\"form-group form-group-md row\">\r\n                            <label for=\"confirmed\" className=\"col-5 col-form-label\">{t(\"confirmed\") + \": \"}</label>\r\n                            <div className=\"col-7\">\r\n                            <input type=\"text\" className={\"form-control-plaintext \" + style.fontColor } id=\"confirmed\" value={numberWithCommas(data.cases)}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label for=\"deaths\" className=\"col-5 col-form-label\">{t(\"deaths\") + \": \"}</label>\r\n                            <div className=\"col-7\">\r\n                            <input type=\"text\"className={\"form-control-plaintext \" + style.fontColor } id=\"deaths\" value={numberWithCommas(data.deaths)}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label for=\"active\" className=\"col-5 col-form-label\">{t(\"active\") + \": \"}</label>\r\n                            <div className=\"col-7\">\r\n                            <input type=\"text\" className={\"form-control-plaintext \" + style.fontColor } id=\"active\" value={numberWithCommas(data.active)}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label for=\"todayCases\" className=\"col-5 col-form-label\">{t(\"todayCases\") + \": \"}</label>\r\n                            <div className=\"col-7\">\r\n                            <input type=\"text\" className={\"form-control-plaintext \" + style.fontColor } id=\"todayCases\" value={numberWithCommas(data.todayCases)}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label for=\"todayDeaths\" className=\"col-5 col-form-label\">{t(\"todayDeaths\") + \": \"}</label>\r\n                            <div className=\"col-7\">\r\n                            <input type=\"text\" className={\"form-control-plaintext \" + style.fontColor }id=\"todayDeaths\" value={numberWithCommas(data.todayDeaths)}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label for=\"updated\" className=\"col-5 col-form-label\">{t(\"updated\") + \": \"}</label>\r\n                            <div className=\"col-7\">\r\n                            <input type=\"text\" className={\"form-control-plaintext \" + style.fontColor } id=\"updated\" value={ts.toLocaleString()}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Maps;","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { GLOBAL_HISTORY_URL } from '../../api/api'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { numberWithCommas } from '../../utils/commas'\r\nconst LineGraph = () => {\r\n    const [ globalHistory, setGlobalHistory ] = useState({});\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n        async function fetchGlobalHistory () {\r\n            try {\r\n                const result = await fetch(GLOBAL_HISTORY_URL);\r\n                const history = await result.json();\r\n                setGlobalHistory({...history});\r\n            }\r\n            catch (error){\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchGlobalHistory();\r\n    },[])\r\n    const convertData = obj => {\r\n        let list = [];\r\n        Object.keys(obj).forEach(key => {\r\n            list.push({x: key, y: obj[key]});\r\n        })\r\n        return list;\r\n    }\r\n    let data = {};\r\n    if (Object.keys(globalHistory).length !== 0) {\r\n        data = {\r\n            labels: Object.keys(globalHistory[\"cases\"]),\r\n            datasets: [{\r\n                label: t(\"confirmed\"),\r\n                data : convertData(globalHistory[\"cases\"]),\r\n                backgroundColor : \"blue\"\r\n            }, \r\n            {\r\n                label: t(\"deaths\"),\r\n                data : convertData(globalHistory[\"deaths\"]),\r\n                backgroundColor : \"red\"\r\n            },\r\n            {\r\n                label: t(\"recovered\"),\r\n                data : convertData(globalHistory[\"recovered\"]),\r\n                backgroundColor : \"green\"\r\n            }\r\n        ]\r\n        }\r\n    }\r\n    const options = {\r\n        tooltips: {\r\n            callbacks: {\r\n               label: function(tooltipItem, data) {\r\n                   let label = data.datasets[tooltipItem.datasetIndex][\"label\"];\r\n                  return label + \": \" + numberWithCommas(tooltipItem.yLabel);\r\n               }\r\n            }\r\n        },\r\n        responsive : true, \r\n        elements : \r\n            { \r\n                line : \r\n                    {\r\n                        fill : false\r\n                    }\r\n            }, \r\n            legend : \r\n            { \r\n                labels : { usePointStyle : true\r\n                }\r\n            }\r\n    }\r\n    return (\r\n        <div style={{width:\"100%\"}}>\r\n            <h5>{t(\"globalTimeline\")}</h5>\r\n            <Line data={data} options={options}></Line>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph","import React, { useState, useEffect } from 'react'\r\nimport { Scatter } from 'react-chartjs-2'\r\nimport { DAILY_URL } from '../../api/api';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { numberWithCommas } from '../../utils/commas';\r\nconst ScatterGraph = () => {\r\n    const mode = Number(localStorage.getItem('mode'));\r\n    const { t } = useTranslation();\r\n    const [ dailyData, setDailyData ] = useState([]);\r\n    const [ intitialDailyData, setInitialDailyData ] = useState([]);\r\n    useEffect(()=>{\r\n        async function fetchDailyData() {\r\n            const result = await fetch(DAILY_URL);\r\n            const data = await result.json();\r\n            setInitialDailyData([...data]);\r\n            setDailyData([...data]);\r\n        }\r\n        fetchDailyData();\r\n    },[])\r\n    const extractData = key => {\r\n        let list = [];\r\n        dailyData.forEach(day => {\r\n            list.push({x: new Date(day[\"reportDate\"].split(\"-\").join(\"-\")).getTime(), y: day[key]});\r\n        })\r\n        return list;\r\n    }\r\n    const getDate = () => {\r\n        let list = [];\r\n        dailyData.forEach(day => {\r\n            list.push(day[\"reportDate\"]);\r\n        })\r\n        return list;\r\n    }\r\n    const handleChanged = e => {\r\n        let data = [...intitialDailyData];\r\n        let index = Number(e.target.value);\r\n        data.splice(index, intitialDailyData.length - index);\r\n        console.log(data.length);\r\n        setDailyData([...data]);\r\n    }\r\n    let data = {}\r\n    if (dailyData.length) {\r\n        data = {\r\n            labels: getDate(),\r\n            datasets : [{\r\n                label : \"confirmed\",\r\n                data:extractData(\"deltaConfirmed\"),\r\n                backgroundColor :  mode? \"#FFB347\" : \"#C51F5D\",\r\n            }]\r\n        }\r\n    }\r\n    const options = {\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    ticks: \r\n                        {\r\n                            callback: (value) => {\r\n                            return new Date(value).toLocaleDateString('en-US', {month: \"short\",year: \"numeric\"});\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n               label: function(tooltipItem, data) {\r\n                  let label = data.labels[tooltipItem.index];\r\n                  return label + \": \" + numberWithCommas(tooltipItem.yLabel) + \" \" + t(\"cases\");\r\n               }\r\n            }\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        responsive : true,\r\n        maintainAspectRatio: false,\r\n     }\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <div className=\"d-flex  flex-column flex-sm-row justify-content-between mb-3\">\r\n                <h5 className=\"col-sm-4\">{t(\"globalDailyCases\")}</h5>\r\n                <div className=\"col-sm-4\">\r\n                    <input type=\"range\" \r\n                    className=\"form-control-range\" \r\n                    min={0} \r\n                    max={intitialDailyData.length} \r\n                    onChange={e => handleChanged(e)} \r\n                    defaultValue={intitialDailyData.length}\r\n                    style ={{backgroundColor: \"red\"}}/>\r\n                </div>\r\n            </div>\r\n            <div  className={mode ? \"light-mode card\" : \"dark-mode card\"} style={{width : \"100%\"}}>\r\n                <Scatter data={data} height={400} options = {options}></Scatter>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScatterGraph;","import React from 'react'\r\nimport '../../styles/Footer.css'\r\nimport { useTranslation } from 'react-i18next'\r\nconst Footer = props => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className=\"mt-5 footer\">\r\n            <p className=\"mb-1 text-center font-weight-lighter\">{t(\"lastUpdated\")} <span>{new Date(props.updated).toLocaleString()}</span></p>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <p className=\"mb-1\">{t(\"providedBy\")} <a href=\"https://disease.sh/\" target=\"_blank\">NOVEL COVID API</a></p>\r\n                <p className=\"mx-2\">|</p>\r\n                <p className=\"m-0\">{t(\"powerBy\")} <a href=\"https://github.com/InterviewCandies\" target=\"_blank\">Vo Quoc Thang</a></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport GlobalStats from './components/GlobalStats/GlobalStats';\nimport Header from './components/Header/Header';\nimport DataTable from './components/DataTable/DataTable';\nimport BarGraph from './components/BarGraph/BarGraph';\nimport ContinentsStats from './components/ContinentsStats/ContinentsStats';\nimport Maps from './components/Maps/Maps';\nimport LineGraph from './components/LineGraph/LineGraph';\nimport ScatterGraph from './components/ScatterGraph/ScatterGraph';\nimport Footer from './components/Footer/Footer';\nclass App extends Component {\n  constructor(props) {\n    super(props) \n    const mode = localStorage.getItem(\"mode\") !== undefined ? Number(localStorage.getItem(\"mode\")) : 1;\n    this.state = {\n      viewMap : 'confirmed',\n      mode :  mode,\n      updated: 0\n    }\n    localStorage.setItem('mode', JSON.stringify(this.state.mode));\n    document.querySelector('body').className = this.state.mode ?'light-mode' : 'dark-mode';  \n  }\n\n  changeMode = () => {\n    this.setState(prevState => {\n      document.querySelector('body').className = (prevState.mode ? 'dark-mode' : 'light-mode');  \n      localStorage.setItem('mode', JSON.stringify(1-prevState.mode));     \n        return {\n          mode : 1 - prevState.mode\n        }\n    }) \n  }\n  changeMapView = view => {\n    this.setState({\n      viewMap : view\n    })\n  }\n  changeUpdate = date => this.setState({updated : date});\n\n  render() {\n    return (\n       <React.Fragment>\n          <Header changed={this.changeMode}></Header>\n          <main className=\"container\">\n            <GlobalStats updated={this.changeUpdate}></GlobalStats>\n            <div className=\"mt-5 d-flex flex-column flex-lg-row justify-content-between\">\n              <div className=\"col-lg-6\"><LineGraph></LineGraph></div>\n              <div className=\"col-lg-6\"><ContinentsStats></ContinentsStats></div>\n            </div>\n            <DataTable></DataTable>\n            <BarGraph></BarGraph>\n            <Maps></Maps>\n            <ScatterGraph></ScatterGraph>\n          </main>\n          <Footer updated={this.state.updated}></Footer>\n       </React.Fragment>\n         \n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}